/**********************************************************************
 *                                                                    *
 * Voreen - The Volume Rendering Engine                               *
 *                                                                    *
 * Copyright (C) 2005-2010 The Voreen Team. <http://www.voreen.org>   *
 *                                                                    *
 * This file is part of the Voreen software package. Voreen is free   *
 * software: you can redistribute it and/or modify it under the terms *
 * of the GNU General Public License version 2 as published by the    *
 * Free Software Foundation.                                          *
 *                                                                    *
 * Voreen is distributed in the hope that it will be useful,          *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of     *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the       *
 * GNU General Public License for more details.                       *
 *                                                                    *
 * You should have received a copy of the GNU General Public License  *
 * in the file "LICENSE.txt" along with this program.                 *
 * If not, see <http://www.gnu.org/licenses/>.                        *
 *                                                                    *
 * The authors reserve all rights not expressly granted herein. For   *
 * non-commercial academic use see the license exception specified in *
 * the file "LICENSE-academic.txt". To get information about          *
 * commercial licensing please contact the authors.                   *
 *                                                                    *
 **********************************************************************/

#include "voreen/qt/widgets/property/propertyvectorwidget.h"

#include "voreen/core/properties/propertyvector.h"
#include "voreen/core/properties/allproperties.h"
#include "voreen/modules/base/processors/utility/propertycontainer.h"

#include "voreen/qt/widgets/property/qpropertywidgetfactory.h"
#include "voreen/qt/widgets/customlabel.h"

#include "tgt/logmanager.h"

#include <QCheckBox>
#include <QHBoxLayout>
#include <QHBoxLayout>
#include <QLabel>
#include <QContextMenuEvent>
#include <QFrame>
#include <QMenu>
#include <QScrollArea>

namespace voreen {

PropertyVectorWidget::PropertyVectorWidget(PropertyVector* prop, QWidget* parent)
    : QPropertyWidget(prop, parent),
      property_(prop)
{
    addVisibilityControls();
    initializePropertyMenu();

    // copy over title widgets generated by superclass
    // and by addVisibilityControls() to header layout
    QHBoxLayout* headerLayout = new QHBoxLayout();
    for (int i=0; i<layout()->count(); ++i)
        headerLayout->addItem(layout()->itemAt(i));
    while (layout()->count() > 0)
        layout()->removeItem(layout()->itemAt(0));

    // re-generate the widgets main layout
    delete layout();
    layout_ = new QHBoxLayout(this);
    layout_->setContentsMargins(0,5,0,5);

    // vertical layout of the widget
    QVBoxLayout* widgetLayout = new QVBoxLayout();
    widgetLayout->setSpacing(1);
    layout_->addLayout(widgetLayout);

    // add header layout to widget layout
    widgetLayout->addLayout(headerLayout);

    // layout containing the property widgets
    propertiesLayout_ = new QGridLayout();
    propertiesLayout_->setContentsMargins(5,3,3,3);
    propertiesLayout_->setSpacing(0);

    // scrollarea surrounding the property widgets
    QWidget* scrollWidget = new QWidget();
    scrollWidget->setLayout(propertiesLayout_);
    QScrollArea* scrollArea = new QScrollArea();
    scrollArea->setWidget(scrollWidget);
    scrollArea->setWidgetResizable(true);
    widgetLayout->addWidget(scrollArea);

    // add property widgets to properties layout
    QPropertyWidgetFactory f;
    for (size_t i=0; i<property_->getProperties().size(); ++i) {
        createAndAddPropertyWidget(property_->getProperties().at(i), &f);
    }

    setFixedHeight(230);
}

void PropertyVectorWidget::initializePropertyMenu() {
    propertyMap_[new QAction("bool", this)] = BOOL;
    propertyMap_[new QAction("button", this)] = BUTTON;
    propertyMap_[new QAction("color", this)] = COLOR;
    propertyMap_[new QAction("float", this)] = FLOAT;
    propertyMap_[new QAction("int", this)] = INT;
    propertyMap_[new QAction("light", this)] = LIGHT;
    propertyMap_[new QAction("string", this)] = STRING;

    propertyMap_[new QAction("intvec2", this)] = INTVEC2;
    propertyMap_[new QAction("intvec3", this)] = INTVEC3;
    propertyMap_[new QAction("intvec4", this)] = INTVEC4;
    propertyMap_[new QAction("floatvec2", this)] = FLOATVEC2;
    propertyMap_[new QAction("floatvec3", this)] = FLOATVEC3;
    propertyMap_[new QAction("floatvec4", this)] = FLOATVEC4;
    propertyMap_[new QAction("floatmat2", this)] = FLOATMAT2;
    propertyMap_[new QAction("floatmat3", this)] = FLOATMAT3;
    propertyMap_[new QAction("floatmat4", this)] = FLOATMAT4;
    //propertyMap_[new QAction("option", this)] = OPTION;
    std::map<QAction*, int>::const_iterator it;
    propertyMenu_ = new QMenu(this);
    for(it = propertyMap_.begin(); it!=propertyMap_.end(); ++it) {
        propertyMenu_->addAction((*it).first);
    }
}

void PropertyVectorWidget::updateFromProperty() {
}

void PropertyVectorWidget::setProperty(PropertyVector* /*change*/) {

}

void PropertyVectorWidget::createAndAddPropertyWidget(Property* prop, QPropertyWidgetFactory* factory) {

    QPropertyWidget* propertyWidget = dynamic_cast<QPropertyWidget*>(prop->createAndAddWidget(factory));

    if (propertyWidget) {
        propertyWidget->hideLODControls();
        propertyWidget->setMinimumWidth(250);
        CustomLabel* nameLabel = propertyWidget->getNameLabel();
        int row = propertiesLayout_->rowCount();
        propertiesLayout_->addWidget(nameLabel, row, 1);
        propertiesLayout_->addWidget(propertyWidget, row, 2);
    }
    else {
        LERRORC("voreen.qt.CompactPropertyVectorWidget", "Unable to create property widget");
    }
}

void PropertyVectorWidget::createAndAddPropertyWidgetByAction(QAction* action) {
    std::map<QAction*, int>::const_iterator it;
    it = propertyMap_.find(action);
    PropertyContainer* pc = dynamic_cast<PropertyContainer*>(prop_->getOwner());
    if(it != propertyMap_.end()) {
        switch ((*it).second)
        {
        case BOOL:
            pc->addNewProperty(new BoolProperty("bool", "bool"));
            break;
        case BUTTON:
            pc->addNewProperty(new ButtonProperty("button", "button"));
            break;
        case COLOR:
            pc->addNewProperty(new FloatVec4Property("floatvec4", "floatvec4", tgt::vec4(0, 0, 0, 0)));
            break;
        case FLOAT:
            pc->addNewProperty(new FloatProperty("float", "float"));
            break;
        case INT:
            pc->addNewProperty(new IntProperty("int", "int"));
            break;
        case STRING:
            pc->addNewProperty(new StringProperty("string", "string", "string"));
            break;
        case INTVEC2:
            pc->addNewProperty(new IntVec2Property("intvec2", "intvec2", tgt::ivec2(0, 0)));
            break;
        case INTVEC3:
            pc->addNewProperty(new IntVec3Property("intvec3", "intvec3", tgt::ivec3(0, 0, 0)));
            break;
        case INTVEC4:
            pc->addNewProperty(new IntVec4Property("intvec4", "intvec4", tgt::ivec4(0, 0, 0, 0)));
            break;
        case FLOATVEC2:
            pc->addNewProperty(new FloatVec2Property("floatvec2", "floatvec2", tgt::vec2(0, 0)));
            break;
        case FLOATVEC3:
            pc->addNewProperty(new FloatVec3Property("floatvec3", "floatvec3", tgt::vec3(0, 0, 0)));
            break;
        case FLOATVEC4:
            pc->addNewProperty(new FloatVec4Property("floatvec4", "floatvec4", tgt::vec4(0, 0, 0, 0)));
            break;
        case FLOATMAT2:
            pc->addNewProperty(new FloatMat2Property("floatmat2", "floatmat2", tgt::mat2(0,0,0,0)));
            break;
        case FLOATMAT3:
            pc->addNewProperty(new FloatMat3Property("floatmat3", "floatmat3", tgt::mat3(0,0,0,0,0,0,0,0,0)));
            break;
        case FLOATMAT4:
            pc->addNewProperty(new FloatMat4Property("floatmat4", "floatmat4", tgt::mat4(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)));
            break;
        /*case OPTION:
            pc->addNewProperty(new OptionProperty("option", "option"));
            break;*/

        default:
            break;
        }
   /* propertyMap_[new QAction("bool", this)] = BOOL;
    propertyMap_[new QAction("button", this)] = BUTTON;
    propertyMap_[new QAction("color", this)] = COLOR;
    propertyMap_[new QAction("float", this)] = FLOAT;
    propertyMap_[new QAction("int", this)] = INT;
    propertyMap_[new QAction("light", this)] = LIGHT;
    propertyMap_[new QAction("string", this)] = STRING;*/
    //propertyMap_[new QAction("option", this)] = OPTION;

    }
}

void PropertyVectorWidget::propertyAdded() {
    QPropertyWidgetFactory f;
    createAndAddPropertyWidget(property_->getProperties().at(property_->getProperties().size()-1), &f);
}

void PropertyVectorWidget::contextMenuEvent(QContextMenuEvent* e) {
    if(dynamic_cast<PropertyContainer*>(prop_->getOwner())) {
        QAction* ac = propertyMenu_->exec(e->globalPos());

        /*if(actest = ac) {
            PropertyContainer* pc = dynamic_cast<PropertyContainer*>(prop_->getOwner());
            pc->addNewProperty(new StringProperty("testnew", "testnew", "testnew"));
        }*/
        if(ac != 0) {
            createAndAddPropertyWidgetByAction(ac);
            propertyAdded();
        }
    }

}

} // namespace
